// Code generated by "enumer -gqlgen -json -sql -text -yaml -type LogEnum -output log_enum_generated.go"; DO NOT EDIT.

package event

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _LogEnumName = "HubCloseBeginHubCloseOkListenerSubOkListenerSubErrListenerUnsubOkListenerUnsubErrListenerCloseBeginListenerCloseOkTopicRegisterBeginTopicRegisterOkTopicCloseBeginTopicCloseOkEventPubBeginEventPubOkEventPubErrEventSendBeginEventSendOkEventSendErrEventHandleBeginEventHandleOkEventHandleErr"

var _LogEnumIndex = [...]uint16{0, 13, 23, 36, 50, 65, 81, 99, 114, 132, 147, 162, 174, 187, 197, 208, 222, 233, 245, 261, 274, 288}

const _LogEnumLowerName = "hubclosebeginhubcloseoklistenersuboklistenersuberrlistenerunsuboklistenerunsuberrlistenerclosebeginlistenercloseoktopicregisterbegintopicregisteroktopicclosebegintopiccloseokeventpubbegineventpubokeventpuberreventsendbegineventsendokeventsenderreventhandlebegineventhandleokeventhandleerr"

func (i LogEnum) String() string {
	if i < 0 || i >= LogEnum(len(_LogEnumIndex)-1) {
		return fmt.Sprintf("LogEnum(%d)", i)
	}
	return _LogEnumName[_LogEnumIndex[i]:_LogEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LogEnumNoOp() {
	var x [1]struct{}
	_ = x[HubCloseBegin-(0)]
	_ = x[HubCloseOk-(1)]
	_ = x[ListenerSubOk-(2)]
	_ = x[ListenerSubErr-(3)]
	_ = x[ListenerUnsubOk-(4)]
	_ = x[ListenerUnsubErr-(5)]
	_ = x[ListenerCloseBegin-(6)]
	_ = x[ListenerCloseOk-(7)]
	_ = x[TopicRegisterBegin-(8)]
	_ = x[TopicRegisterOk-(9)]
	_ = x[TopicCloseBegin-(10)]
	_ = x[TopicCloseOk-(11)]
	_ = x[EventPubBegin-(12)]
	_ = x[EventPubOk-(13)]
	_ = x[EventPubErr-(14)]
	_ = x[EventSendBegin-(15)]
	_ = x[EventSendOk-(16)]
	_ = x[EventSendErr-(17)]
	_ = x[EventHandleBegin-(18)]
	_ = x[EventHandleOk-(19)]
	_ = x[EventHandleErr-(20)]
}

var _LogEnumValues = []LogEnum{HubCloseBegin, HubCloseOk, ListenerSubOk, ListenerSubErr, ListenerUnsubOk, ListenerUnsubErr, ListenerCloseBegin, ListenerCloseOk, TopicRegisterBegin, TopicRegisterOk, TopicCloseBegin, TopicCloseOk, EventPubBegin, EventPubOk, EventPubErr, EventSendBegin, EventSendOk, EventSendErr, EventHandleBegin, EventHandleOk, EventHandleErr}

var _LogEnumNameToValueMap = map[string]LogEnum{
	_LogEnumName[0:13]:         HubCloseBegin,
	_LogEnumLowerName[0:13]:    HubCloseBegin,
	_LogEnumName[13:23]:        HubCloseOk,
	_LogEnumLowerName[13:23]:   HubCloseOk,
	_LogEnumName[23:36]:        ListenerSubOk,
	_LogEnumLowerName[23:36]:   ListenerSubOk,
	_LogEnumName[36:50]:        ListenerSubErr,
	_LogEnumLowerName[36:50]:   ListenerSubErr,
	_LogEnumName[50:65]:        ListenerUnsubOk,
	_LogEnumLowerName[50:65]:   ListenerUnsubOk,
	_LogEnumName[65:81]:        ListenerUnsubErr,
	_LogEnumLowerName[65:81]:   ListenerUnsubErr,
	_LogEnumName[81:99]:        ListenerCloseBegin,
	_LogEnumLowerName[81:99]:   ListenerCloseBegin,
	_LogEnumName[99:114]:       ListenerCloseOk,
	_LogEnumLowerName[99:114]:  ListenerCloseOk,
	_LogEnumName[114:132]:      TopicRegisterBegin,
	_LogEnumLowerName[114:132]: TopicRegisterBegin,
	_LogEnumName[132:147]:      TopicRegisterOk,
	_LogEnumLowerName[132:147]: TopicRegisterOk,
	_LogEnumName[147:162]:      TopicCloseBegin,
	_LogEnumLowerName[147:162]: TopicCloseBegin,
	_LogEnumName[162:174]:      TopicCloseOk,
	_LogEnumLowerName[162:174]: TopicCloseOk,
	_LogEnumName[174:187]:      EventPubBegin,
	_LogEnumLowerName[174:187]: EventPubBegin,
	_LogEnumName[187:197]:      EventPubOk,
	_LogEnumLowerName[187:197]: EventPubOk,
	_LogEnumName[197:208]:      EventPubErr,
	_LogEnumLowerName[197:208]: EventPubErr,
	_LogEnumName[208:222]:      EventSendBegin,
	_LogEnumLowerName[208:222]: EventSendBegin,
	_LogEnumName[222:233]:      EventSendOk,
	_LogEnumLowerName[222:233]: EventSendOk,
	_LogEnumName[233:245]:      EventSendErr,
	_LogEnumLowerName[233:245]: EventSendErr,
	_LogEnumName[245:261]:      EventHandleBegin,
	_LogEnumLowerName[245:261]: EventHandleBegin,
	_LogEnumName[261:274]:      EventHandleOk,
	_LogEnumLowerName[261:274]: EventHandleOk,
	_LogEnumName[274:288]:      EventHandleErr,
	_LogEnumLowerName[274:288]: EventHandleErr,
}

var _LogEnumNames = []string{
	_LogEnumName[0:13],
	_LogEnumName[13:23],
	_LogEnumName[23:36],
	_LogEnumName[36:50],
	_LogEnumName[50:65],
	_LogEnumName[65:81],
	_LogEnumName[81:99],
	_LogEnumName[99:114],
	_LogEnumName[114:132],
	_LogEnumName[132:147],
	_LogEnumName[147:162],
	_LogEnumName[162:174],
	_LogEnumName[174:187],
	_LogEnumName[187:197],
	_LogEnumName[197:208],
	_LogEnumName[208:222],
	_LogEnumName[222:233],
	_LogEnumName[233:245],
	_LogEnumName[245:261],
	_LogEnumName[261:274],
	_LogEnumName[274:288],
}

// LogEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LogEnumString(s string) (LogEnum, error) {
	if val, ok := _LogEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LogEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LogEnum values", s)
}

// LogEnumValues returns all values of the enum
func LogEnumValues() []LogEnum {
	return _LogEnumValues
}

// LogEnumStrings returns a slice of all String values of the enum
func LogEnumStrings() []string {
	strs := make([]string, len(_LogEnumNames))
	copy(strs, _LogEnumNames)
	return strs
}

// IsALogEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LogEnum) IsALogEnum() bool {
	for _, v := range _LogEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for LogEnum
func (i LogEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for LogEnum
func (i *LogEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LogEnum should be a string, got %s", data)
	}

	var err error
	*i, err = LogEnumString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for LogEnum
func (i LogEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for LogEnum
func (i *LogEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = LogEnumString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for LogEnum
func (i LogEnum) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for LogEnum
func (i *LogEnum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = LogEnumString(s)
	return err
}

func (i LogEnum) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *LogEnum) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of LogEnum: %[1]T(%[1]v)", value)
	}

	val, err := LogEnumString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for LogEnum
func (i LogEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for LogEnum
func (i *LogEnum) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("LogEnum should be a string, got %T", value)
	}

	var err error
	*i, err = LogEnumString(str)
	return err
}
